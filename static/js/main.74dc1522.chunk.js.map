{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","onInputChange","event","setState","input","target","value","addTask","state","length","tasks","concat","isClicked","alert","onAddClick","handleKeyPress","key","onTaskClick","index","clicked","new_clicks","splice","onDelClick","new_tasks","className","type","onChange","this","onKeyPress","placeholder","onClick","map","data","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wOAmGeA,G,wDA9Fd,aAAc,IAAD,8BACZ,gBAQDC,cAAgB,SAACC,GAChB,EAAKC,SAAS,CAACC,MAAOF,EAAMG,OAAOC,SAVvB,EAabC,QAAU,WACN,EAAKC,MAAMJ,MAAMK,OAEpB,EAAKN,SAAS,CAACO,MAAO,EAAKF,MAAME,MAAMC,OAAO,CAAC,EAAKH,MAAMJ,QACzDA,MAAO,GACPQ,UAAW,EAAKJ,MAAMI,UAAUD,OAAO,EAAC,MAIxCE,MAAM,iBAtBK,EA0BbC,WAAa,WACZ,EAAKP,WA3BO,EA8BbQ,eAAiB,SAACb,GACC,UAAdA,EAAMc,KACR,EAAKT,WAhCK,EAoCbU,YAAc,SAACC,GACd,IAAIC,EAAU,EAAKX,MAAMI,UAAUM,GAC/BE,EAAa,EAAKZ,MAAMI,UAC5BQ,EAAWC,OAAOH,EAAM,GAAGC,GAC3B,EAAKhB,SAAS,CAACS,UAAWQ,KAxCd,EA2CbE,WAAa,SAACJ,GACb,IAAIK,EAAY,EAAKf,MAAME,MAC3Ba,EAAUF,OAAOH,EAAM,GACvB,EAAKf,SAAS,CAACO,MAAOa,KA5CtB,EAAKf,MAAQ,CACZJ,MAAO,GACPM,MAAO,GACPE,UAAW,IALA,E,qDAkDJ,IAAD,OACL,OACE,yBAAKY,UAAU,wBACd,gCACC,uBAAGA,UAAU,6BAAb,cAIA,yBAAKA,UAAU,qCACd,2BACAC,KAAK,OACLD,UAAU,aACVE,SAAUC,KAAK1B,cACf2B,WAAYD,KAAKZ,eACjBc,YAAY,WACZvB,MAAOqB,KAAKnB,MAAMJ,QAClB,4BACAoB,UAAU,2BAEbM,QAASH,KAAKb,YAHX,QAOD,yBAAKU,UAAU,YAEdG,KAAKnB,MAAME,MAAMqB,KAAI,SAACC,EAAMd,GAC3B,OACC,wBAAIM,UAAU,uBAAuBR,IAAKE,GAC1C,uBACAM,UAAW,EAAKhB,MAAMI,UAAUM,GAAO,+BAA+B,kBACtEY,QAAS,kBAAM,EAAKb,YAAYC,KAASc,GACzC,4BAAQR,UAAU,6BAClBM,QAAS,kBAAM,EAAKR,WAAWJ,KAD/B,qB,GAnFOe,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.74dc1522.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component{\n\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tinput: \"\",\n\t\t\ttasks: [],\n\t\t\tisClicked: []\n\t\t}\n\t}\n\n\tonInputChange = (event) => {\n\t\tthis.setState({input: event.target.value});\n\t}\n\n\taddTask = () => {\n\t\tif(this.state.input.length)\n\t\t{\n\t\tthis.setState({tasks: this.state.tasks.concat([this.state.input]),\n\t\t\tinput: \"\",\n\t\t\tisClicked: this.state.isClicked.concat([false])});\n\t\t}\n\t\telse\n\t\t{\n\t\t\talert('Invalid Task');\n\t\t}\n\t}\n\n\tonAddClick = () => {\n\t\tthis.addTask();\n\t}\n\n\thandleKeyPress = (event) => {\n  \tif(event.key === 'Enter'){\n  \t\tthis.addTask();\n \t}\n\t}\n\n\tonTaskClick = (index) => {\n\t\tlet clicked = this.state.isClicked[index];\n\t\tlet new_clicks = this.state.isClicked;\n\t\tnew_clicks.splice(index,1,!clicked);\n\t\tthis.setState({isClicked: new_clicks});\n\t}\n\n\tonDelClick = (index) => {\n\t\tlet new_tasks = this.state.tasks;\n\t\tnew_tasks.splice(index,1);\n\t\tthis.setState({tasks: new_tasks});\n\t}\n\n\n\trender(){\n\t  \treturn (\n\t\t    <div className=\"whole white shadow-5\">\n\t\t    \t<center>\n\t\t    \t\t<p className=\"pointer dim heading\n\t\t    \t\tpa1 b\">\n\t\t    \t\tTo-Do List\n\t\t    \t\t</p>\n\t\t    \t\t<div className=\"flex justify-between ma4 division\">\n\t\t\t    \t\t<input \n\t\t\t    \t\ttype=\"text\" \n\t\t\t    \t\tclassName=\"w-70 input\"\n\t\t\t    \t\tonChange={this.onInputChange}\n\t\t\t    \t\tonKeyPress={this.handleKeyPress}\n\t\t\t    \t\tplaceholder=\"Add task\"\n\t\t\t    \t\tvalue={this.state.input}/>\n\t\t\t    \t\t<button \n\t\t\t    \t\tclassName=\"pointer dim \n\t\t\t\t\t\tw-30 button\"\n\t\t\t\t\t\tonClick={this.onAddClick}>\n\t\t\t    \t\tAdd\n\t\t\t    \t\t</button>\n\t\t    \t\t</div>\n\t\t    \t\t<div className=\"division\">\n\t\t    \t\t{\n\t\t    \t\t\tthis.state.tasks.map((data, index) => {\n\t\t    \t\t\t\treturn(\n\t\t    \t\t\t\t\t<li className=\"flex justify-between\" key={index}>\n\t\t    \t\t\t\t\t<p\n\t\t    \t\t\t\t\tclassName={this.state.isClicked[index]?\"line_through pointer task tl\":\"pointer task tl\"} \n\t\t    \t\t\t\t\tonClick={() => this.onTaskClick(index)}>{data}</p>\n\t\t    \t\t\t\t\t<button className=\"pointer dim w-30 delButton\"\n\t\t    \t\t\t\t\tonClick={() => this.onDelClick(index)}>Delete</button>\n\t\t    \t\t\t\t\t</li>\n\t\t    \t\t\t\t);\n\t\t    \t\t\t})\n\t\t    \t\t}\n\t\t    \t\t</div>\n\t\t    \t</center>\n\t\t    </div>\n\t  \t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}